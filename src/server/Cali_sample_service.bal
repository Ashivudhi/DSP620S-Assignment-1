import ballerina/grpc;
import ballerina/crypto;
import ballerina/io;

listener grpc:Listener ep = new (9090);

function writeIntoJson(json content, string path) returns @tainted error? {

    io:WritableByteChannel wbc = check io:openWritableFile(path);

     io:WritableCharacterChannel wch = new (wbc, "UTF8");
     var result = wch.writeJson(content);

     var close = wch.close();
}

function readIntoJson(string path) returns @tainted json|error{
    io:ReadableByteChannel rbc = check io:openReadableFile(path);

        io:ReadableCharacterChannel rch = new (rbc, "UTF8");
        var result = rch.readJson();
        var close = rch.close();

        return result;
}

service Cali on ep {

    resource function writeRecord(grpc:Caller caller, NewRecordRequest value) {
        // Implementation goes here.
        //--
            string input = value.toString();
            byte[] inputArr = input.toBytes();

            byte[] output = crypto:hashMd5(inputArr);
            string recordKey = output.toBase64();
            //assigning hashed key to Record key
            value.rKey = output.toBase16();

            //json newRecord = <json>json.constructFrom(value); type casting
            json|error newRecord = json.constructFrom(value);
            json[] allRecords = [];
            io:println(newRecord);
            if(newRecord is error){
                ///
            }else{
                //allRecords.push(newRecord);
                //var readfile = readIntoJson("./storage.json");
                //if(readfile is error){
                //    io:println(readfile);
                //}else {
                //	io:println(readfile);
                //
                //	allRecords = readfile;
                	allRecords.push(newRecord);

                	                var writingfile = writeIntoJson(allRecords,"./storage.json");
                                    if(writingfile is error){
                                        io:println(writingfile.reason());
                                    }else{
                                        io:println("Successfully stored!!");
                                    }
                }


            }



        // You should return a NewRecordResponse
    }
    resource function updateRecord(grpc:Caller caller, UpdateRecordRequest value) {
        // Implementation goes here.

        // You should return a UpdateRecordResponse
    }
    resource function readRecord(grpc:Caller caller, ReadRecordRequest value) {
        // Implementation goes here.

        // You should return a ReadRecordResponse
    }
    resource function readRecord_Key_Version(grpc:Caller caller, ReadRecordRequest_key_Version value) {
        // Implementation goes here.

        // You should return a ReadRecordResponse
    }
    @grpc:ResourceConfig { streaming: true } 
    resource function readRecord_Criterion(grpc:Caller caller, ReadCriterionRequest value) {
        // Implementation goes here.

        // You should return a ReadRecordResponse
    }
}

public type Artists record {|
    string name = "";
    string member = "";
    
|};

public type Songs record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};

public type NewRecordRequest record {|
    string rKey = "";
    int rVersion = 0;
    string date = "";
    Artists[] artists = [];
    string band = "";
    Songs[] songs = [];
    
|};

public type RecordCopy record {|
    string rKey = "";
    int rVersion = 0;
    string date = "";
    Artists[] artists = [];
    string band = "";
    Songs[] songs = [];
    
|};

public type NewRecordResponse record {|
    string rkey = "";
    string rVersion = "";
    
|};

public type UpdateRecordRequest record {|
    string rKey = "";
    string rVersion = "";
    RecordCopy? rCopy = ();
    
|};

public type UpdateRecordResponse record {|
    string rKey = "";
    string rVersion = "";
    
|};

public type ReadRecordRequest record {|
    string rKey = "";
    
|};

public type ReadRecordResponse record {|
    string rKey = "";
    int rVersion = 0;
    string date = "";
    Artists[] artists = [];
    string band = "";
    Songs[] songs = [];
    
|};

public type ReadRecordRequest_key_Version record {|
    string rKey = "";
    int rVersion = 0;
    
|};

public type ReadCriterionRequest record {|
    string songTitle = "";
    string artistName = "";
    string band = "";
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "storage-system.proto
        "google/protobuf/wrappers.proto
        
    };
}

